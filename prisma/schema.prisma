// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AttrType {
  Button
  Image
  Color
}

enum ProductType {
  Fixed
  Variable
  Auction
}

enum Gender {
  Male
  Female
}

enum StockType {
  InStock
  OutOfStock
  StockLevel
}

enum Role {
  Admin
  Seller
  Buyer
  Trader
  Staff
  SuperAdmin
}

enum NotiType {
  ContactMsg
  Feedback
  NewUser
  LowStock
  NewSubscriber
  NewUserReview
  NewProductReview
  UpdateUserReview
  UpdateProductReview
  UpdateMembership
  NewOrder
  NewProduct
  UpdateProduct
  UpdateOrder
  MembershipExpired
  MembershipNearExpired
  RemindOrder
  CancelOrder
}

enum UGCReportType {
  Counterfeit
  Misleading
  Defective
  Missing
  Violation
  Inappropriate
  Fraudulent
  Unfair
  Prohibited
  Other
}

enum FeedbackType {
  Product
  Brand
  Buyer
}

enum AdsLocation {
  HomeAds1
  HomeAds21
  HomeAds22
  HomeAds31
  HomeAds32
  HomeAds33
  HomeAds34
  HomeAds41
  HomeAds42
  HomeAds43
  HomeAds44
  ProductAds11
  ProductAds12
  ProductAds21
  ProductAds22
  ProductAds23
  ProductAds24
  Marketplace1
  Marketplace21
  Marketplace22
  Marketplace23
  Marketplace24
  Memberships1
}

model State {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  nameMM    String
  lat       String
  lng       String
  capital   String
  color     String?
  districts District[]
  User      User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ShippingCost ShippingCost[]
  UserAddress  UserAddress[]
}

model Township {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  nameMM     String
  District   District? @relation(fields: [districtId], references: [id])
  districtId String?   @db.ObjectId
  User       User[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ShippingCost ShippingCost[]
  UserAddress  UserAddress[]
}

model District {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  nameMM    String
  townships Township[]
  State     State?     @relation(fields: [stateId], references: [id])
  stateId   String?    @db.ObjectId
  User      User[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ShippingCost ShippingCost[]
  UserAddress  UserAddress[]
}

model Category {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String?
  nameMM String?
  color  String?
  slug   String  @unique
  icon   String?

  parentId       String?    @db.ObjectId
  parentCategory Category?  @relation("CategorySubCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategory    Category[] @relation("CategorySubCategory")
  Product        Product[]  @relation(fields: [productIds], references: [id])
  productIds     String[]   @db.ObjectId
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Attribute {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String   @unique
  nameMM String?
  type   AttrType @default(Button)

  Term Term[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Term {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  nameMM      String?
  value       String?
  attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  email           String?          @unique
  role            Role             @default(Seller)
  userDefinedId   String?          @db.ObjectId
  userDefinedRole UserDefinedRole? @relation(fields: [userDefinedId], references: [id])
  phoneNum        String?          @unique
  username        String?
  displayName     String?
  dob             DateTime?
  gender          Gender
  nrcFront        String?
  nrcBack         String?
  profile         String?

  houseNo     String?
  street      String?
  stateStr    String?
  districtStr String?
  townshipStr String?
  address     String?
  state       State?    @relation(fields: [stateId], references: [id])
  stateId     String?   @db.ObjectId
  district    District? @relation(fields: [districtId], references: [id])
  districtId  String?   @db.ObjectId
  township    Township? @relation(fields: [townshipId], references: [id])
  townshipId  String?   @db.ObjectId

  isBlocked Boolean? @default(false)
  isDeleted Boolean? @default(false)
  sellAllow Boolean? @default(false)

  adminNote String?

  Product           Product[]
  ShippingCost      ShippingCost[]
  currentMembership Membership?    @relation(fields: [membershipId], references: [id])
  membershipId      String?        @db.ObjectId

  isOfferFreeShipping Boolean? @default(false)
  shippingIncluded    Boolean  @default(false)
  defaultShippingCost Int?
  freeShippingCost    Int?
  shippingCost        Int?

  lastLogin    DateTime?
  lastNotiOpen DateTime?

  createdAt       DateTime?      @default(now())
  updatedAt       DateTime       @updatedAt
  CartItems       CartItems?
  SiteVisit       SiteVisit?
  WishedItems     WishedItems?
  Review          Review[]
  Feedback        Feedback[]
  HelpMessage     HelpMessage[]
  NotiToken       NotiToken[]
  Notification    Notification[] @relation(fields: [notificationIds], references: [id])
  notificationIds String[]       @db.ObjectId
  PromoCode       PromoCode[]
  Order           Order[]
  Ads             Ads[]
  Auctions        Auctions[]
  AuctionList     AuctionList?
  UserAddress     UserAddress[]
}

model UserDefinedRole {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  permission String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User[]
}

model Membership {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  name                     String   @unique
  nameMM                   String?
  adsDetails               String?
  adsDetailsMM             String?
  saleReportDetails        String?
  saleReportDetailsMM      String?
  topSearchDetails         String?
  topSearchDetailsMM       String?
  extraAdsPricing          Int?
  extraSKUPricing          Int?
  price                    Int?
  validity                 Int?
  onBoardingLimit          Int?
  topSearchStart           Int?
  SKUListing               Int?
  subCategoryReport        Int?
  freeAdsLimit             Int?
  adsValidity              Int?
  adsLifeTime              Int?
  percentagePerTransaction Float?
  productLimit             Int?
  isInfinity               Boolean
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  User                     User[]
}

model Product {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  nameMM   String?
  slug     String?     @unique
  SKU      String?
  type     ProductType @default(Fixed)
  seller   User        @relation(fields: [sellerId], references: [id])
  sellerId String      @db.ObjectId

  categories  Category[] @relation(fields: [categoryIds], references: [id])
  categoryIds String[]   @db.ObjectId
  tags        String[]
  imgList     String[]

  regularPrice  Int?
  salePrice     Int?
  isPercent     Boolean?   @default(false)
  isSalePeriod  Boolean?   @default(false)
  stockType     StockType? @default(InStock)
  stockLevel    Int?
  saleStartDate DateTime?
  saleEndDate   DateTime?

  estimatedPrice Int?
  openingBid     Int?
  startTime      DateTime?
  endTime        DateTime?

  attributes              Json[]
  variations              Json[]
  description             String?
  descriptionMM           String?
  additionalInformation   String?
  additionalInformationMM String?
  shippingInformation     String?
  shippingInformationMM   String?

  isPublished Boolean @default(false)
  isFeatured  Boolean @default(false)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Review        Review[]
  Feedback      Feedback[]
  ProductView   ProductView[]
  WishedItems   WishedItems[] @relation(fields: [wishedItemsId], references: [id])
  wishedItemsId String[]      @db.ObjectId
  Brand         Brand?        @relation(fields: [brandId], references: [id])
  brandId       String?       @db.ObjectId

  Condition   Condition? @relation(fields: [conditionId], references: [id])
  conditionId String?    @db.ObjectId
  Auctions    Auctions[]
}

model Brand {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String?
  nameMM String?

  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Condition {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String?
  nameMM String?

  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItems {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique @db.ObjectId
  cartItems       Json[]
  billingAddress  Json
  shippingAddress Json
  shippingFee     Json[]
  isAddressDiff   Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model AuctionList {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @unique @db.ObjectId
  auctionList Auctions[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Auctions {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  product         Product?     @relation(fields: [productId], references: [id])
  productId       String?      @db.ObjectId
  createdBy       User         @relation(fields: [createdByUserId], references: [id])
  createdByUserId String       @db.ObjectId
  amount          Int
  SKU             String
  createdAt       DateTime     @default(now())
  AuctionList     AuctionList? @relation(fields: [auctionListId], references: [id])
  auctionListId   String?      @db.ObjectId
}

model SiteVisit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  visitDate   String
  isMobile    Boolean  @default(false)
  ipAddress   String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @unique @db.ObjectId
  detailsInfo Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WishedItems {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique @db.ObjectId
  products   Product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ShippingCost {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  seller              User      @relation(fields: [sellerId], references: [id])
  sellerId            String    @db.ObjectId
  state               State?    @relation(fields: [stateId], references: [id])
  stateId             String?   @db.ObjectId
  district            District? @relation(fields: [districtId], references: [id])
  districtId          String?   @db.ObjectId
  township            Township? @relation(fields: [townshipId], references: [id])
  townshipId          String?   @db.ObjectId
  isOfferFreeShipping Boolean   @default(false)
  shippingIncluded    Boolean   @default(false)
  defaultShippingCost Int?
  freeShippingCost    Int?
  shippingCost        Int?
  carGateShippingCost Int?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Review {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  product           Product? @relation(fields: [productId], references: [id])
  productId         String?  @db.ObjectId
  createdBy         User     @relation(fields: [createdByUserId], references: [id])
  createdByUserId   String   @db.ObjectId
  helpfulUsersId    String[]
  notHelpfulUsersId String[]
  rating            Int
  message           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Feedback {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  product      Product?        @relation(fields: [productId], references: [id])
  productId    String?         @db.ObjectId
  sellerId     String?
  feedbackType FeedbackType    @default(Product)
  user         User            @relation(fields: [userId], references: [id])
  userId       String          @db.ObjectId
  details      String?
  reasons      UGCReportType[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model HelpMessage {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String
  phone          String
  message        String
  solution       String?
  isSolved       Boolean  @default(false)
  solvedBy       User?    @relation(fields: [solvedByUserId], references: [id])
  solvedByUserId String?  @db.ObjectId
  device         Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ProductView {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])
  productId   String   @db.ObjectId
  clickedDate String
  address     String
  createdAt   DateTime @default(now())
}

model Subscribe {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  createdAt DateTime @default(now())
}

model Legal {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  accessibility      String?
  accessibilityMM    String?
  returnPolicy       String?
  returnPolicyMM     String?
  refundPolicy       String?
  refundPolicyMM     String?
  privacyPoliy       String?
  privacyPoliyMM     String?
  cookie             String?
  cookieMM           String?
  termsNConditions   String?
  termsNConditionsMM String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Configuration {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  lowStockLimit        Int
  maximumAuctionPeriod Int
  senderEmail          String
  senderEmailPassword  Json?
  senderEmailHost      String
  senderEmailPort      String
  senderEmailTSL       Boolean
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model NotiToken {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  notificationToken String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  image     String?
  type      NotiType
  details   Json?
  sendList  String[] @db.ObjectId
  sendUsers User[]   @relation(fields: [sendList], references: [id])
  createdAt String

  @@map(name: "notifications")
}

model PromoCode {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  img                  String?
  promoCode            String  @unique
  minimumPurchasePrice Int
  discount             Int
  isPercent            Boolean @default(false)
  isShippingFree       Boolean @default(false)

  couponUsage                  Int?
  isCouponUsageInfinity        Boolean @default(false)
  isCouponUsagePerUserInfinity Boolean @default(false)
  couponUsagePerUser           Int?

  userIds String @db.ObjectId
  users   User   @relation(fields: [userIds], references: [id])

  isScheduled Boolean   @default(false)
  startDate   DateTime?
  endDate     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Order {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  orderNo         Int     @unique
  orderBy         User    @relation(fields: [orderByUserId], references: [id])
  orderByUserId   String  @db.ObjectId
  billingAddress  Json
  isAddressDiff   Boolean @default(false)
  shippingAddress Json
  cartItems       Json[]
  sellerResponse  Json[]
  buyerNote       String?

  discountTotal Int?

  promoId   String?    @db.ObjectId
  promoCode PromoCode? @relation(fields: [promoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQGroup {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  titleMM       String
  icon          String
  description   String
  descriptionMM String
  FAQ           FAQ[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FAQ {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  question   String
  questionMM String
  answer     String
  answerMM   String
  faqGroup   FAQGroup @relation(fields: [fAQGroupId], references: [id])
  fAQGroupId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Content {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  googleMapUrl  String?
  googleMapUrl1 String?
  lat           Float?
  long          Float?
  email         String?
  phone         String?
  address       String?
  addressMM     String?
  socialUrl     String[]

  aboutTitle         String?
  aboutTitleMM       String?
  aboutDescription   String?
  aboutDescriptionMM String?
  homeBannerImg      String?
  sellBannerImg      String?
  sellRegisterImg    String?
  loginImg           String?
  registerImg        String?

  playStoreURL   String?
  appStoreURL    String?
  facebookPlugin String?

  homeTitle         String?
  homeTitleMM       String?
  homeDescription   String?
  homeDescriptionMM String?

  mobileImg           String?
  mobileTitle         String?
  mobileTitleMM       String?
  mobileDescription   String?
  mobileDescriptionMM String?

  sellTitle         String?
  sellTitleMM       String?
  sellDescription   String?
  sellDescriptionMM String?

  homeFeatures Json[]
  howToOrder   Json[]
  sellFeatures Json[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Ads Locations - { location, startDate}
model Ads {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  adsImg       String
  seller       User       @relation(fields: [sellerId], references: [id])
  sellerId     String     @db.ObjectId
  url          String?
  adsLocations Json[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  AdsClick     AdsClick[]
}

model AdsClick {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ads         Ads      @relation(fields: [adsId], references: [id])
  adsId       String   @db.ObjectId
  clickedDate String
  address     String
  createdAt   DateTime @default(now())
}

model UserAddress {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  user             User      @relation(fields: [userId], references: [id])
  userId           String    @db.ObjectId
  name             String
  phoneNum         String
  email            String?
  addressName      String?
  houseNo          String?
  street           String?
  state            State?    @relation(fields: [stateId], references: [id])
  stateId          String?   @db.ObjectId
  district         District? @relation(fields: [districtId], references: [id])
  districtId       String?   @db.ObjectId
  township         Township? @relation(fields: [townshipId], references: [id])
  townshipId       String?   @db.ObjectId
  isBillingAddress Boolean   @default(false)
}
